#ifndef @libName@_FRONTEND_H
#define @libName@_FRONTEND_H

#include <xpu/host.h>
#include <@interfaceFile@>

class @libName@ {

public:
    #define XPU_KERNEL_DECL(name, ...) \
        struct name : public xpu::kernel_dispatcher<name, @libName@> { \
            template<typename... Args> \
            static inline xpu::error dispatch_impl(@libName@ &lib, xpu::grid params, Args &&... args) { \
                return lib.run_ ## name(params, std::forward<Args>(args)...); \
            } \
            static inline const char *name_impl() { \
                return "@libName@::" #name; \
            } \
        }; \
        virtual xpu::error run_ ## name(xpu::grid, ## __VA_ARGS__) = 0;
    #include <@kernelDeclFile@>
    #undef XPU_KERNEL_DECL

private:
    template<typename, typename, typename...Args>
    friend void xpu::run_kernel(xpu::grid, Args&&...);

    static @libName@ &instance(xpu::driver type);
};

#define XPU_KERNEL_DECL(name, ...) \
    template<> \
    struct xpu::is_kernel<@libName@::name> : std::true_type {};
#include <@kernelDeclFile@>
#undef XPU_KERNEL_DECL

#endif